/* production rule for block of code or scope */
block: '{' block segment '}'
		;

/* production rule for a C segment */
segment: if_segment
		| 
		;

/* if else-if production */
if_segment: if_segment_unmatched
			| if_segment_matched
			;
if_segment_matched: IF '('  ')' '{' if_segment_matched '}' ELSE '{' if_segment_matched '}' 
					| segment
					;
if_segment_unmatched: IF '('  ')' '{' if_segment '}'
					| IF '('  ')' '{' if_segment_matched '}' ELSE '{' if_segment_unmatched '}'


/* Production rule for argument list */
argument_list:
	argument type IDENTIFIER
	| 
	;
/* comma separated arguments */
argument: 
	type IDENTIFIER ',' argument
	|
	;


	

arithmetic_expression: 
	arithmetic_expression '+' arithmetic_expression
	| arithmetic_expression '-' arithmetic_expression
	| arithmetic_expression '*' arithmetic_expression
	| arithmetic_expression '/' arithmetic_expression
	| arithmetic_expression '^' arithmetic_expression
	| arithmetic_expression '%' arithmetic_expression
	| arithmetic_expression "&&" arithmetic_expression
	| arithmetic_expression "||" arithmetic_expression
	| arithmetic_expression '&' arithmetic_expression
	| arithmetic_expression '|' arithmetic_expression
	| '(' arithmetic_expression ')'
	| '!' arithmetic_expression
	| IDENTIFIER
	| HEX_CONST
	| STRING_CONST
	| INT_CONST 
	| REAL_CONST
	| comparison_expression
	;

comparison_expression:
	arithmetic_expression "<=" arithmetic_expression
	| arithmetic_expression ">=" arithmetic_expression
	| arithmetic_expression "==" arithmetic_expression
	| arithmetic_expression '<' arithmetic_expression
	| arithmetic_expression '>' arithmetic_expression
	;

/*production rules for assignment expression*/
assignment_expression:
	IDENTIFIER '=' arithmetic_expression 
	;

expression:
	arithmetic_expression 
	| assignment_expression 
	;
